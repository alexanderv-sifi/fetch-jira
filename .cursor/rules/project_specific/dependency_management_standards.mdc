---
description: 
globs: 
alwaysApply: false
---
---
description: "Standards for managing Python project dependencies using pyproject.toml and uv (or pip with requirements.txt)."
globs: ["pyproject.toml", "uv.lock", "requirements*.txt"] # Files this rule primarily applies to
alwaysApply: true
---

# Dependency Management Standards

**Primary Reference:** `DEVELOPMENT_GUIDELINES.md` (general principles for stable and maintainable dependencies)
**Project-Specific Implementation:** `PROJECT_DEVELOPMENT_PLAN.md`, Section 2.8: "Packaging and Deployment - Dependency Management"
**Referenced By:** `00_ai_assistant_directives.mdc`

## 1. Tooling:
*   The project **must** use `pyproject.toml` to define project metadata and dependencies, compatible with PEP 517/518.
*   `uv` is the preferred tool for virtual environment management, dependency resolution, and package installation/synchronization.
    *   Commands like `uv pip sync` (from `uv.lock` or `pyproject.toml`) and `uv pip install` are standard.
    *   Use `uv venv` to manage virtual environments.

## 2. Dependency Specification in `pyproject.toml`:
*   **Main Dependencies:** Core application dependencies **must** be listed in the `[project.dependencies]` array.
    ```toml
    [project]
    # ...
    dependencies = [
        "requests~=2.31",
        "pydantic>=2.0,<3.0",
        "python-dotenv~=1.0"
        # other core dependencies
    ]
    ```
*   **Optional Dependencies (Development/Testing):** Development-specific dependencies (e.g., for testing, linting, building docs) **must** be listed in `[project.optional-dependencies]`. A common group name is `dev` or `test`.
    ```toml
    [project.optional-dependencies]
    dev = [
        "pytest~=8.0",
        "pytest-cov~=5.0",
        "ruff~=0.4",
        # other development tools
    ]
    test = [ # Can be same as dev or a subset if needed
        "pytest~=8.0",
        "pytest-cov~=5.0",
    ]
    ```
*   **Version Specifiers:**
    *   For direct application dependencies, use compatible release specifiers (e.g., `requests~=2.31` which means `>=2.31.0, <3.0.0`) or range specifiers (`pydantic>=2.0,<3.0`) to allow for patch and minor updates while ensuring compatibility.
    *   Exact versions (e.g., `some-lib==1.2.3`) can be used if a specific version is critically required or if a library is known to have breaking changes frequently even in minor versions.
    *   Avoid overly restrictive pinning for libraries unless necessary.
    *   **Never** use wildcard versions (e.g., `requests=*`).

## 3. Lock File:
*   A `uv.lock` file, generated by `uv lock` or `uv pip compile --emit-lock`, **must** be committed to the repository.
    *   This file ensures deterministic builds by locking the exact versions of all direct and transitive dependencies.
*   The `uv.lock` file should always be kept in sync with `pyproject.toml`.
*   If not using `uv` for locking, a `requirements.txt` (for main dependencies) and `requirements-dev.txt` (for development dependencies) generated from `pyproject.toml` (e.g., using `uv pip compile pyproject.toml -o requirements.txt`) must be committed. However, `uv.lock` is preferred.

## 4. Managing Dependencies:
*   **Adding a Dependency:**
    1.  Add the new dependency to the appropriate section in `pyproject.toml` with a suitable version specifier.
    2.  Update the lock file: `uv lock` (or `uv pip compile ...` if generating requirements.txt).
    3.  Install/sync the new dependencies into your virtual environment: `uv pip sync` or `uv pip install .[dev]`.
*   **Updating Dependencies:**
    1.  To update all dependencies to their latest allowed versions as per `pyproject.toml` and update `uv.lock`: `uv lock --refresh`. Then `uv pip sync`.
    2.  To update a specific package: `uv pip install "package_name>=new_version"` (this will update `pyproject.toml` if it's a direct dependency and you manage it there, or you might need to update `pyproject.toml` manually then re-lock and sync).
    3.  Regularly review and update dependencies to incorporate security patches and bug fixes.
    4.  After updating, run all tests (`pytest`) to ensure compatibility.
*   **Only add dependencies that are strictly necessary.**
*   Consider the license, maintenance status, and security track record of new dependencies.

## 5. Virtual Environments:
*   All development, testing, and execution **must** occur within a Python virtual environment.
*   `uv` is the recommended tool for creating and managing virtual environments (e.g., `uv venv`).
*   The `README.md` **must** include instructions for setting up the virtual environment and installing dependencies (e.g., `uv venv`, then `uv pip sync requirements.lock` or `uv pip sync pyproject.toml --all-extras`).

## 6. Dependency Audit (Future Consideration):
*   Consider tools for auditing dependencies for known vulnerabilities (e.g., `pip-audit` which can work with `uv`, `safety`) as part of a CI process or regular maintenance routine.

## Rationale:
Adhering to these standards ensures:
*   **Reproducibility:** Builds are consistent across different environments and times.
*   **Stability:** Predictable behavior by controlling dependency versions.
*   **Security:** Easier management of updates for security vulnerabilities.
*   **Collaboration:** Clear understanding of project dependencies for all team members.
